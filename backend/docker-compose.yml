services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gofomentos-api
    ports:
      - "8002:8000"
    volumes:
      - .:/app
      - /app/__pycache__  # Evita problemas com cache
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - MONGO_URI=mongodb://admin:password@mongo:27017
      - MONGO_DB=editais_db
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
      - TZ=America/Sao_Paulo  # Timezone para agendamento correto
    depends_on:
      mongo:
        condition: service_healthy
      chroma:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo:
    image: mongo:6.0
    container_name: gofomentos-mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  chroma:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: gofomentos-chroma
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8001:8000"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/8000' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  app-network:
    driver: bridge

volumes:
  mongo_data:
  chroma_data:
